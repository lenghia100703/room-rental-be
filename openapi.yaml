openapi: 3.0.3
info:
  description: Express for building RESTful APIs
  version: 1.0.0
  title: demo
tags:
  - name: admin
    description: Admin endpoints
  - name: auth
    description: Auth endpoints
  - name: users
    description: User endpoints
externalDocs:
  description: Github
  url: https://github.com/lenghia100703/base-be-express
servers:
  - description: development
    url: http://localhost:8000
  - description: production
    url: https://baobianquycuong.vn
paths:
  /health:
    get:
      tags: [admin]
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Ok
        '500':
          description: Not healthy

  /api/auth/register:
    post:
      tags: [auth]
      summary: Register by email
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
                - role
              properties:
                email:
                  type: string
                  format: email
                  description: User's email
                password:
                  type: string
                  description: User's password
                  minLength: 6
                  maxLength: 128
                username:
                  type: string
                  description: User's name
                  maxLength: 128
                role:
                  type: string
                  description: User's role
                  enum:
                    - admin
                    - user
                  default: user
              example: { 'email': 'your@email.com', 'password': '*********', 'username': 'your name', 'role': 'user' }
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/login:
    post:
      tags: [ auth ]
      summary: Login by email
      operationId: loginByEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email
                password:
                  type: string
                  description: User's password
                  minLength: 6
                  maxLength: 128
              example: { 'email': 'your@email.com', 'password': '*********' }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/user/{id}:
    get:
      tags:
        - User
      summary: Lấy thông tin người dùng theo ID
      description: Truy vấn thông tin người dùng theo ID đã cung cấp.
      parameters:
        - name: id
          in: path
          required: true
          description: ID của người dùng
          schema:
            type: string
      responses:
        200:
          description: Lấy thông tin người dùng thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        404:
          description: Người dùng không tồn tại hoặc đã bị xóa
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Lỗi từ server
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user/me:
    get:
      tags:
        - User
      summary: Lấy thông tin người dùng hiện tại
      description: Lấy thông tin người dùng dựa trên token xác thực.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lấy thông tin người dùng thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        401:
          description: Token không hợp lệ hoặc hết hạn
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Lỗi từ server
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/room:
    get:
      summary: Get list of rooms
      description: Retrieve a paginated list of rooms or all rooms if perPage is set to -1.
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: perPage
          in: query
          description: Number of items per page (-1 for all)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  message:
                    type: string
        500:
          description: Internal server error
    post:
      summary: Create a room
      description: Add a new room to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        201:
          description: Room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Room'
                  message:
                    type: string
        500:
          description: Internal server error
  /api/room/{roomId}:
    get:
      summary: Get room by ID
      description: Retrieve a room by its ID
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Room retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Room'
                  message:
                    type: string
        404:
          description: Room not found
        500:
          description: Internal server error
    put:
      summary: Update a room
      description: Update details of an existing room
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditRoomRequest'
      responses:
        200:
          description: Room updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Room'
                  message:
                    type: string
        404:
          description: Room not found
        500:
          description: Internal server error
    delete:
      summary: Delete a room
      description: Remove a room from the database
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Room deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Room not found
        500:
          description: Internal server error


components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: JWT Authentication
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  responses:
    BadRequest:
      description: 'Bad Request: Some parameters may contain invalid values'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example: { 'message': 'Something is required' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example: { 'message': 'User 1 not found' }
    Unauthorized:
      description: 'Unauthorized: Incorrect email or password'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example: { 'message': 'Invalid access key' }
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example: { 'message': 'Insufficient permission' }
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example: { 'message': 'Server is not running' }
    OK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example: { 'message': 'Successfully' }
  schemas:
    Room:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        price:
          type: number
        images:
          type: array
          items:
            type: string
        bedroom:
          type: integer
        bathroom:
          type: integer
        size:
          type: number
        latitude:
          type: number
        longitude:
          type: number
        city:
          type: string
        address:
          type: string
        school:
          type: string
        bus:
          type: string
        restaurant:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [ "AVAILABLE", "RENTED" ]
        owner:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateRoomRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        ownerId:
          type: string
        price:
          type: number
        bedroom:
          type: integer
        bathroom:
          type: integer
        size:
          type: number
        latitude:
          type: number
        longitude:
          type: number
        city:
          type: string
        address:
          type: string
        school:
          type: string
        bus:
          type: string
        restaurant:
          type: string
        images:
          type: array
          items:
            type: string
    EditRoomRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        ownerId:
          type: string
        price:
          type: number
        bedroom:
          type: integer
        bathroom:
          type: integer
        size:
          type: number
        latitude:
          type: number
        longitude:
          type: number
        city:
          type: string
        address:
          type: string
        school:
          type: string
        bus:
          type: string
        restaurant:
          type: string
        images:
          type: array
          items:
            type: string
    Message:
      type: object
      properties:
        message:
          type: string
      required:
        - message
      example: { 'message': 'Message' }
    AuthToken:
      type: object
      properties:
        tokenType:
          type: string
          description: Access Token's type
        accessToken:
          type: string
          description: Authorization Token
        refreshToken:
          type: string
          description: Token to get a new accessToken after expiration time
        expiresIn:
          type: integer
          description: Access Token's expiration time in miliseconds
      example: { 'tokenType': 'Bearer', 'accessToken': 'a', 'refreshToken': 'b', 'expiresIn': 123 }
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
      example: { "_id": "66e4a3b9ece6e0c2ef96dc57", "username": "Minh Nghia", "email": "test123@gmail.com", "role": "user", "createdAt": "2024-09-13T20:42:33.601Z", "updatedAt": "2024-09-13T20:42:33.601Z" }
    AuthResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/User'